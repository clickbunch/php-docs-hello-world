(()=>{"use strict";window["br_foxstrike_0_3"]=e=>{var t;try{const n=window.googletag=window.googletag||{cmd:[]},i=window.foxstrike=window.foxstrike||{cmd:[]},o=window[e.templateParams.libraryName];if(!o)return e.callback(!0,`no_tmzLibrary_found_at_window[${e.templateParams.libraryName}]`);const l=o.select&&o.select(o.selectors.getAdSlots);if(!l)return e.callback(!0,"no_foxSlots_found");const r=window.DEVICE_VIEW;if(!r)return e.callback(!0,"no_foxStrikeDeviceView_found");let a,d=e.prebidGlobalInstanceName&&window[e.prebidGlobalInstanceName];const s=function(t){t.adUnitCode===e.divId&&(a=[t.width,t.height])};d.que=d.que||[],d.que.push((function(){d.onEvent("bidWon",s)}));const c=25,u=window._middyo&&(null===(t=window._middyo.i)||void 0===t?void 0:t.sc),f=v(e.targeting,!1);let m;if(u){let p=l.filter((function(e){var t;return(null===(t=null==e?void 0:e.strikeSize)||void 0===t?void 0:t.indexOf("ban"))>-1&&/ban(\d+)$/.test(null==e?void 0:e.strikeSize)})).map((e=>{const t=/ban(\d+)$/.exec(e.strikeSize);return(null==t?void 0:t.length)&&t.length>1&&Number(t[1])}));if(!p.length)return e.callback(!0,"no_leaderboard_found");let E=p[p.length-1]+1;m=`ban${E+e.demandIndex}`}else{const k="tablet"==r?"lb":"ban";let y,_=l.filter((function(e){return e.strikeSize&&e.strikeSize.indexOf(k)>-1})).length+1;_=e.spotIndex%100<4?_+e.spotIndex%4:_+3,y="tablet"==r&&_>6?6:_,m=k+y}const w="smartphone"===r?"mobile":r;function v(e,t){let n={};for(let t of e)n[t.key]=Array.isArray(t.value)?t.value:[t.value];return t&&(n.browsiRefresh="true"),n}function b(t){let i=o=>{if(t===o.slot.getSlotElementId()){n.pubads().removeEventListener("slotRenderEnded",i);const r={gamInfo:{lid:o.lineItemId,oid:o.campaignId},adUnit:o.slot.getAdUnitPath()};if(o.isEmpty)return e.callback(!0,void 0,r);{const d=document.getElementById(t);function s(t){return a=a||t.size,setTimeout((()=>{d&&d.parentElement&&(d.parentElement.style.minHeight=a[1]+"px")}),3e3),e.callback(t.isEmpty,void 0,r)}1===o.size[0]&&1===o.size[1]?d&&(l=d,new Promise((e=>{let t,n;n=setTimeout((()=>(clearInterval(t),e())),5e3),t=setInterval((()=>{if(g(l))return clearInterval(t),clearTimeout(n),e()}),200)}))).then((e=>{s(o)})):s(o)}}var l};n.pubads().addEventListener("slotRenderEnded",i)}function g(e){const t=h(e);return t.w>c&&t.h>c}function h(e){let t={w:0,h:0};return e.childNodes.forEach((e=>{if((n=e)&&n instanceof Element){let n=I(e);t.w=Math.max(t.w,n.w),t.h+=n.h}var n})),t}function I(e){const t=e.getBoundingClientRect();return{h:t.height,w:t.width}}i.cmd.push((function(t){var n;const i=t.getConfig(),o=null===(n=null==i?void 0:i.meta)||void 0===n?void 0:n.pageType;b(e.divId),t.insertAd(w,m,e.divId,o,f)}))}catch(x){e.callback(!0,x.message)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,